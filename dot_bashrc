# .bashrc

[[ $- == *i* ]] &&
  source "$HOME/.local/share/blesh/ble.sh" --rcfile "$HOME/.blerc"

# Source global definitions
if [ -f /etc/bashrc ]; then
  . /etc/bashrc
fi

# User specific environment
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]; then
  PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
if [ -d ~/.bashrc.d ]; then
  for rc in ~/.bashrc.d/*; do
    if [ -f "$rc" ]; then
      . "$rc"
    fi
  done
fi
unset rc

export EDITOR=nvim
export VISUAL=nvim

# include .bashrc_extra if it exists
if [ -f $HOME/.bashrc_extra ]; then
  . $HOME/.bashrc_extra
fi

alias cp='cp -i'
alias mv='mv -i'
alias mkdir='mkdir -p'
alias cat="bat"
alias rm="trash -v"

alias ls="lsd"

# Alias's for safe and forced reboots
alias rebootsafe='sudo shutdown -r now'
alias rebootforce='sudo shutdown -r -n now'

alias speedtest="speedtest-cli"
alias vim="nvim"

alias fortune="fortune | cowsay -f vader"
alias loltune="fortune | lolcat"

alias reset-level="chezmoi apply --init"

# Copy file with a progress bar
cpp() {
  set -e
  strace -q -ewrite cp -- "${1}" "${2}" 2>&1 |
    awk '{
        count += $NF
        if (count % 10 == 0) {
            percent = count / total_size * 100
            printf "%3d%% [", percent
            for (i=0;i<=percent;i++)
                printf "="
            printf ">"
            for (i=percent;i<100;i++)
                printf " "
            printf "]\r"
        }
    }
    END { print "" }' total_size="$(stat -c '%s' "${1}")" count=0
}

LAST_REPO="" # Last repository user visited

fetch() {
  git rev-parse 2>/dev/null # check if you are in a git repository without dumping the output to the screen [1]
  if [ $? -eq 0 ]; then     # if return value of previous command is 0 then you are
    onefetch
  # Or show system info
  else
    fastfetch
  fi
}

clear() {
  command clear
  fetch
}

# Automatically do an ls after each cd, z, or zoxide
cd() {
  if [ -n "$1" ]; then
    z "$@" && ls
  else
    builtin cd ~
  fi

  # If user goes into git repository clean everything and show repo info
  git rev-parse 2>/dev/null # check if you are in a git repository without dumping the output to the screen [1]
  if [ $? -eq 0 ]; then     # if return value of previous command is 0 then you are
    CURRENT_REPO=$(basename "$(git rev-parse --show-toplevel)")
    if [ "$LAST_REPO" != "$CURRENT_REPO" ]; then
      command clear
      onefetch
      LAST_REPO=$CURRENT_REPO
    fi
  else
    if [ "$LAST_REPO" != "" ]; then
      command clear
      fastfetch
      LAST_REPO=""
    fi
  fi
}

# Colored Man Pages

#########################################
# Colorcodes:
# Black       0;30     Dark Gray     1;30
# Red         0;31     Light Red     1;31
# Green       0;32     Light Green   1;32
# Brown       0;33     Yellow        1;33
# Blue        0;34     Light Blue    1;34
# Purple      0;35     Light Purple  1;35
# Cyan        0;36     Light Cyan    1;36
# Light Gray  0;37     White         1;37
#########################################

function colored {
  local -x LESS_TERMCAP_mb=$'\e[0;31'   # red
  local -x LESS_TERMCAP_md=$'\e[1;31m'  # bold_red
  local -x LESS_TERMCAP_me=$'\e[0m'     # reset
  local -x LESS_TERMCAP_so=$'\e[45;93m' # bold_yellow
  local -x LESS_TERMCAP_se=$'\e[0m'     # reset
  local -x LESS_TERMCAP_us=$'\e[1;32m'  # green
  local -x LESS_TERMCAP_ue=$'\e[0;34m'  # blue

  # Prefer `less` whenever available, since we specifically configured
  # environment for it.
  local -x PAGER=$(type -P less)
  local -x GROFF_NO_SGR=1

  command "$@"
}

# Wrapper for man to colorize the output.
function man {
  colored "$FUNCNAME" "$@"
}

eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
eval "$(atuin init bash)"
eval "$(starship init bash)"
eval "$(zoxide init bash)"

[[ ${BLE_VERSION-} ]] && ble-attach

eval "$(thefuck --alias)"

fetch
